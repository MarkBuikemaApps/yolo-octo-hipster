package com.markbuikema.juliana32.section;

import java.util.ArrayList;
import java.util.List;

import org.holoeverywhere.widget.ViewPager;

import android.view.View;

import com.markbuikema.juliana32.R;
import com.markbuikema.juliana32.activity.MainActivity;
import com.markbuikema.juliana32.adapter.TeamAdapter;
import com.markbuikema.juliana32.adapter.TeamsFragmentPagerAdapter;
import com.markbuikema.juliana32.asynctask.TeamsRetriever;
import com.markbuikema.juliana32.model.Team;
import com.markbuikema.juliana32.model.Team.Category;
import com.viewpagerindicator.TabPageIndicator;

public class Teams {

	private MainActivity activity;
	private TeamAdapter[] teamAdapters;
	private static List<Team> teamList;

	private boolean loading = true;

	public Teams( MainActivity act ) {
		activity = act;

		boolean isTablet = act.getResources().getBoolean( R.bool.isTablet );
		if ( isTablet )
			teamAdapters = new TeamAdapter[ 1 ];
		else
			teamAdapters = new TeamAdapter[ Category.values().length ];

		TeamsRetriever retriever = new TeamsRetriever( act ) {
			@Override
			protected void onPostExecute( List<Team> result ) {
				loading = false;
				activity.fixActionBar();
				teamList = result;

				createAdapters();
			}
		};

		retriever.execute();

		View mainView = activity.findViewById( R.id.teamsView );
		ViewPager pager = (ViewPager) mainView.findViewById( R.id.teamsPager );
		TeamsFragmentPagerAdapter adapter = new TeamsFragmentPagerAdapter( act, teamAdapters );
		pager.setAdapter( adapter );

		TabPageIndicator tabs = (TabPageIndicator) mainView.findViewById( R.id.teamsTabsIndicator );
		tabs.setViewPager( pager );

		if ( isTablet )
			tabs.setVisibility( View.GONE );
	}

	protected void createAdapters() {
		if ( teamAdapters.length == 1 )
			teamAdapters[ 0 ] = new TeamAdapter( activity, null, teamList );
		else
			for ( int i = 0; i < teamAdapters.length; i++ ) {
				Category cat = Category.values()[ i ];
				teamAdapters[ i ] = new TeamAdapter( activity, cat, getTeamsFromCategory( cat ) );
			}
	}

	public static List<Team> getTeamsFromCategory( Category cat ) {
		if ( cat == null )
			return teamList;

		List<Team> teams = new ArrayList<Team>();
		for ( Team team : teamList )
			if ( team.getCategory() == cat )
				teams.add( team );

		return teams;
	}

	public Team findTeamById( int teamId ) {
		for ( Team team : teamList )
			if ( team.getId() == teamId )
				return team;
		return null;
	}

	public static List<Team> getTeams() {
		return teamList;
	}

	public boolean isLoading() {
		return loading;
	}
}
