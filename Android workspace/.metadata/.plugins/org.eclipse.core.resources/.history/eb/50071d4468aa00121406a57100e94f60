package com.markbuikema.juliana32.sections;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.util.Log;
import android.view.Display;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.markbuikema.juliana32.R;
import com.markbuikema.juliana32.activities.MainActivity;
import com.markbuikema.juliana32.model.Game;
import com.markbuikema.juliana32.model.TeaserNieuwsItem;

public class Home {

	private static final String TAG = "Home Section";
	private static final int MARGIN = 20;

	private MainActivity activity;

	private ListView fixtures;
	private FixtureAdapter fixtureAdapter;
	private LinearLayout teaserContainer;
	private ArrayList<TeaserNieuwsItem> teasers;

	private int teaserWidth;
	private int teaserHeight;

	public Home(MainActivity act) {
		activity = act;
		View mainView = act.findViewById(R.id.home);
		fixtures = (ListView) mainView.findViewById(R.id.fixtures);
		teaserContainer = (LinearLayout) mainView.findViewById(R.id.teaserContainer);

		teasers = new ArrayList<TeaserNieuwsItem>();

		setTeaserDimensions();

		new TeaserRetriever().execute();
	}

	public void populateGames() {
		fixtureAdapter = new FixtureAdapter(activity, activity.getLatestGames());
		if (fixtureAdapter.getCount() > 0) fixtures.setAdapter(fixtureAdapter);
	}

	private void setTeaserDimensions() {
		WindowManager wm = (WindowManager) activity.getSystemService(Context.WINDOW_SERVICE);
		Display d = wm.getDefaultDisplay();
		teaserWidth = (d.getWidth() / 3) * 2;
		float height = ((float) teaserWidth / 246f) * 96f;
		teaserHeight = (int) height;
	}

	@SuppressLint("NewApi")
	public void addTeaser(final TeaserNieuwsItem item) {
		Log.d(TAG, item.toString());
		teasers.add(item);
		View view = LayoutInflater.from(activity).inflate(R.layout.listitem_teaseritem, null);
		TextView teaserText = (TextView) view.findViewById(R.id.teaserTitle);
		ImageView teaserImage = (ImageView) view.findViewById(R.id.teaserImage);
		teaserText.setText(item.getTitle());
		BitmapDrawable drawable = new BitmapDrawable(activity.getResources(), item.getImage());
		teaserImage.setImageDrawable(drawable);
		LayoutParams params = new LayoutParams(teaserWidth, teaserHeight);
		params.setMargins(MARGIN, MARGIN, MARGIN, MARGIN);
		params.gravity = teasers.size() % 2 == 1 ? Gravity.LEFT : Gravity.RIGHT;
		view.setLayoutParams(params);

		if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH)
			view.announceForAccessibility(item.getSubTitle());
		view.setClickable(true);
		view.setContentDescription(item.getSubTitle());

		view.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO
				Toast.makeText(activity, "Clicked: " + item.getImgUrl(), Toast.LENGTH_LONG).show();
			}
		});

		teaserContainer.addView(view);
	}

	private class FixtureAdapter extends ArrayAdapter<Game> {

		public FixtureAdapter(Context context, List<Game> objects) {
			super(context, 0, objects);
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = LayoutInflater.from(activity).inflate(R.layout.listitem_game, null);
			}
			TextView date = (TextView) convertView.findViewById(R.id.game_date);
			TextView homeTeam = (TextView) convertView.findViewById(R.id.game_home_team_name);
			TextView awayTeam = (TextView) convertView.findViewById(R.id.game_away_team_name);
			TextView homeScore = (TextView) convertView.findViewById(R.id.game_home_team_score);
			TextView awayScore = (TextView) convertView.findViewById(R.id.game_away_team_score);

			TextView scoreDivider = (TextView) convertView.findViewById(R.id.game_team_score_divider);

			Game game = getItem(position);

			date.setText(game.getDateString());
			homeTeam.setText(game.isHome() ? game.getTeamName() : game.getOtherTeam());
			awayTeam.setText(game.isHome() ? game.getOtherTeam() : game.getTeamName());
			if (game.isPlayed()) {
				homeScore.setText(Integer.toString(game.isHome() ? game.getTeamGoals() : game.getOtherGoals()));
				awayScore.setText(Integer.toString(game.isHome() ? game.getOtherGoals() : game.getTeamGoals()));
				scoreDivider.setVisibility(View.VISIBLE);
			} else {
				homeScore.setText("");
				awayScore.setText("");
				scoreDivider.setVisibility(View.GONE);

			}

			return convertView;
		}

	}

	private class TeaserRetriever extends AsyncTask<Void, TeaserNieuwsItem, Void> {

		@Override
		protected Void doInBackground(Void... arg0) {
			Log.d(TAG, "Started retrieving teaser items");
			HttpClient client = new DefaultHttpClient();
			HttpGet teaserGet = new HttpGet(MainActivity.BASE_SERVER_URL + "/teasers/get");
			try {
				HttpResponse response = client.execute(teaserGet);

				String jsonString = EntityUtils.toString(response.getEntity(), "UTF-8");
				Log.d(TAG, jsonString);
				JSONObject obj = null;
				try {
					obj = new JSONObject(jsonString);
					JSONArray array = obj.getJSONArray("teaserNewsItem");
					for (int i = 0; i < array.length(); i++) {
						processTeaserJSONObject(array.getJSONObject(i));
					}
				} catch (JSONException jsone) {
					try {
						@SuppressWarnings("null")
						JSONObject singleObject = obj.getJSONObject("teaserNewsItem");
						processTeaserJSONObject(singleObject);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}

		private void processTeaserJSONObject(JSONObject obj) {
			try {
				int id = obj.getInt("id");
				String title = obj.getString("title");
				String content = obj.getString("content");
				String subTitle = obj.getString("subTitle");
				String detailUrl = obj.getString("detailUrl");
				String imgUrl = obj.getString("imgUrl");
				TeaserNieuwsItem item = new TeaserNieuwsItem(id, title, subTitle, content, imgUrl, detailUrl);
				publishProgress(item);
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}

		@Override
		protected void onProgressUpdate(TeaserNieuwsItem... values) {
			for (TeaserNieuwsItem item : values) {

				addTeaser(item);

			}
		}
	}
}
