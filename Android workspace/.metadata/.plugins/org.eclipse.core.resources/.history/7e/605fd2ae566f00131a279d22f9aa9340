package com.markbuikema.juliana32.adapter;

import org.holoeverywhere.LayoutInflater;
import org.holoeverywhere.widget.ArrayAdapter;
import org.holoeverywhere.widget.TextView;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;

import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;
import com.markbuikema.juliana32.R;
import com.markbuikema.juliana32.model.NieuwsItem;
import com.markbuikema.juliana32.model.Team;
import com.markbuikema.juliana32.model.Team.Category;
import com.markbuikema.juliana32.util.DataManager;
import com.markbuikema.juliana32.util.Util;

public class TeamAdapter extends ArrayAdapter<Team> {

	private Category cat;

	private int actionBarHeight;
	private int columnCount;

	public TeamAdapter( Context context, Category cat ) {
		super( context, 0, DataManager.getInstance().getTeams( cat ) );
		this.cat = cat;

		actionBarHeight = context.getResources().getDimensionPixelSize( R.dimen.action_bar_height );
		columnCount = context.getResources().getInteger( R.integer.teamColumns );
	}

	@Override
	public View getView( int position, View convertView, ViewGroup parent ) {

		if ( position < columnCount ) {
			View topView = new View( getContext() );
			LayoutParams lp = new LayoutParams( LayoutParams.MATCH_PARENT, actionBarHeight );
			topView.setLayoutParams( lp );
			return topView;
		}

		if ( convertView == null )
			convertView = LayoutInflater.from( getContext() ).inflate( R.layout.listitem_team );

		ImageView teamPhoto = (ImageView) convertView.findViewById( R.id.teamGridPicture );
		TextView teamName = (TextView) convertView.findViewById( R.id.teamGridName );

		Team team = getItem( position );

		UrlImageViewHelper.setUrlDrawable( teamPhoto, team.getTeamPhotoUrl(), R.drawable.team_placeholder );
		teamName.setTypeface( Util.getRobotoLight( getContext() ) );
		teamName.setText( team.getName() );

		return convertView;
	}

	@Override
	public int getViewTypeCount() {
		return 2;
	}

	@Override
	public int getItemViewType( int position ) {
		return position < columnCount ? 0 : 1;
	}

	@Override
	public int getCount() {
		return super.getCount() + columnCount;
	}

	@Override
	public long getItemId( int position ) {
		return position < columnCount ? 0 : position - columnCount;
	}
	
	@Override
	public Team getItem( int position ) {
		return position < columnCount ? null : super.getItem( position - columnCount );
	}

}