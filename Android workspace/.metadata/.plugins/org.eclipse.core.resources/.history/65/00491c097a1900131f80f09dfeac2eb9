package com.markbuikema.juliana32.model;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

import com.markbuikema.juliana32.tools.FacebookHelper;

public class FacebookNieuwsItem extends NieuwsItem {

	private String fbId;
	private String link;
	private int likeCount;
	private GregorianCalendar createdAt;
	private String imgUrl;
	private ArrayList<Like> likes;
	private ArrayList<Comment> comments;

	public FacebookNieuwsItem(String id, String content, String dateString, String link, String imgUrl, int likeCount) {
		super(-1, "Facebook", null, content);

		fbId = id;
		String yearString = dateString.substring(0, 4);
		String monthString = dateString.substring(5, 7);
		String dayString = dateString.substring(8, 10);
		createdAt = new GregorianCalendar(Integer.parseInt(yearString), Integer.parseInt(monthString) - 1,
				Integer.parseInt(dayString));
		this.link = link;
		this.imgUrl = imgUrl;
		this.likeCount = likeCount;

		comments = new ArrayList<Comment>();
		likes = new ArrayList<Like>();
	}

	public String getFbId() {
		return fbId;
	}

	public String getLink() {
		return link;
	}

	public GregorianCalendar getCreatedAt() {
		return createdAt;
	}

	public String getImgUrl() {
		return imgUrl;
	}

	public int getLikeCount() {
		return likeCount;
	}

	@SuppressWarnings("unchecked")
	public List<Like> getLikes() {
		return (List<Like>) likes.clone();
	}

	@SuppressWarnings("unchecked")
	public List<Comment> getComments() {
		return (List<Comment>) comments.clone();
	}

	public class LikeLoader extends AsyncTask<Void, Like, Void> {

		@SuppressWarnings("deprecation")
		@Override
		protected Void doInBackground(Void... v) {
			if (likes.size() > 0)
				return null;
			likes = new ArrayList<Like>();
			Bundle params = new Bundle();
			params.putString("access_token", FacebookHelper.ACCESS_TOKEN);
			params.putString("fields", "name,picture");
			params.putInt("limit", 150);
			try {
				JSONObject likes = new JSONObject(FacebookHelper.getFacebook().request("/" + id + "/likes", params));
				JSONArray data = likes.getJSONArray("data");
				for (int i = 0; i < data.length(); i++)
					processLikeJSON(data.getJSONObject(i));
			} catch (MalformedURLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (JSONException e) {
				e.printStackTrace();
			}
			return null;
		}

		private void processLikeJSON(JSONObject o) {
			try {
				JSONObject picture = o.getJSONObject("picture");
				JSONObject data = picture.getJSONObject("data");
				String url = data.getString("url");
				Like like = new Like(o.getString("id"), o.getString("name"), url);
				likes.add(like);
				publishProgress(like);
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
	}

	public class CommentLoader extends AsyncTask<Void, Comment, Void> {

		@Override
		protected Void doInBackground(Void... v) {
			if (comments.size() > 0)
				return null;
			comments = new ArrayList<Comment>();

			Bundle params = new Bundle();
			params.putString("access_token", FacebookHelper.ACCESS_TOKEN);
			params.putInt("limit", 150);
			try {
				JSONObject likes = new JSONObject(FacebookHelper.getFacebook().request("/" + id + "/comments", params));
				JSONArray data = likes.getJSONArray("data");
				for (int i = 0; i < data.length(); i++)
					Log.d("COMMENT", data.getJSONObject(i).toString() + "...");
			} catch (MalformedURLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (JSONException e) {
				e.printStackTrace();
			}
			return null;
		}

		// private Comment processCommentJSON(JSONObject data) {
		//
		// String id;
		// try {
		// id = data.getString("id");
		// } catch (JSONException e) {
		// e.printStackTrace();
		// }
		//
		// String name;
		// try {
		// name = data.getJSONObject("from").getString("name");
		// } catch (JSONException e) {
		// e.printStackTrace();
		// }
		//
		// String imgUrl ;
		// String text;
		// try {
		// text = data.getString("message");
		// } catch (JSONException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		//
		// String dateString = data.getString("created_time");
		//
		// Comment comment = new Comment(id, name, imgUrl, text, dateString);
		// return comment;
		// }

	}
}
