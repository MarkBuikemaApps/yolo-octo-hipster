package com.markbuikema.juliana32.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import android.util.Log;

import com.markbuikema.juliana32.util.Util;

public class Team {

	public enum Category {
		SENIOREN, JUNIOREN, DAMES
	}

	private static final String TAG = "Team model";

	private int id;
	private String name;
	private String code;
	private Category category;
	private ArrayList<Table> tables;
	private ArrayList<Game> games;
	private ArrayList<String> photos;

	private static Comparator<Table> tableComparator = new Comparator<Table>() {

		@Override
		public int compare(Table lhs, Table rhs) {
			if (lhs.getId() < rhs.getId())
				return -1;
			else
				if (lhs.getId() > rhs.getId())
					return 1;
				else
					return 0;
		}

	};

	public Team(int id, String name, Category category) {
		this.id = id;
		this.name = name;
		this.category = category;

		try {
			code = name.split(" ")[1];
		} catch (ArrayIndexOutOfBoundsException e) {
			code = "error";
		}

		games = new ArrayList<Game>();
		tables = new ArrayList<Table>();
		photos = new ArrayList<String>();
	}

	// public void addTableRow(TableRow row) {
	// if (row == null) return;
	// tables.add(row);
	// }

	public boolean isCategory(Category cat) {
		return category == cat;
	}

	public void addGame(Game game) {
		if (game == null)
			return;
		games.add(game);
	}

	public ArrayList<Game> getUitslagen() {
		ArrayList<Game> uitslagen = new ArrayList<Game>();
		for (Game game : games)
			if (game.isPlayed())
				uitslagen.add(game);
		return uitslagen;
	}

	public ArrayList<Game> getProgramma() {
		ArrayList<Game> programma = new ArrayList<Game>();
		for (Game game : games)
			if (!game.isPlayed())
				programma.add(game);
		return programma;
	}

	public int getGameCount() {
		return games.size();
	}

	public int getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public Category getCategory() {
		return category;
	}

	public String getCode() {
		return code;
	}

	@SuppressWarnings("unchecked")
	public ArrayList<Game> getGames() {
		return (ArrayList<Game>) games.clone();
	}

	@SuppressWarnings("unchecked")
	public ArrayList<Table> getTables() {
		return (ArrayList<Table>) tables.clone();
	}

	public void addTable(Table table) {
		tables.add(table);
		Collections.sort(tables, tableComparator);

//		Log.d(TAG, "table added");
	}

	public void addPhoto(String photo) {
		if (photo == null)
			return;

//		Log.d(TAG, "String added to team " + name + ", url: " + photo);
		photos.add(photo);
	}

	@SuppressWarnings("unchecked")
	public ArrayList<String> getStrings() {
		return (ArrayList<String>) photos.clone();
	}

	public int getStringCount() {
		return photos.size();
	}

	public String getTableName(int position) {
		return tables.get(position).getName();
	}

	public String[] getPhotoUrls() {
		String[] urls = new String[photos.size()];
		for (int i = 0; i < photos.size(); i++)
			if (photos.get(i).startsWith("http"))
				urls[i] = photos.get(i);
			else
				urls[i] = Util.PHOTO_URL_PREFIX + photos.get(i) + Util.PHOTO_URL_SUFFIX;
		return urls;
	}

	public int getPhotoCount() {
		return photos.size();
	}

	public List<String> getPhotos() {
		return Collections.unmodifiableList(photos);
	}

}
