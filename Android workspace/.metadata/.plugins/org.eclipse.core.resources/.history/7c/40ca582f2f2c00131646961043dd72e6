package com.markbuikema.juliana32.util;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.GregorianCalendar;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Build;
import android.os.Looper;
import android.util.TypedValue;
import android.view.Display;
import android.view.WindowManager;

public class Tools {

	private static final String PREF_SHOULD_SHOW_HINT = "shouldShowHint";
	public static final String PHOTO_URL_PREFIX = "http://graph.facebook.com/";
	public static final String PHOTO_URL_SUFFIX = "/picture";
	private static Bitmap[] teletekst;
	private static Bitmap facebookLogo;
	private static Bitmap julianaLogo;
	private static float screenWidth = -1;

	public static void putTeletekst(Bitmap[] bmps) {
		teletekst = bmps;
	}

	public static Bitmap getTeletekst(int index) {
		if (index >= 0 && teletekst.length > index)
			return teletekst[index];
		else
			return null;
	}

	public static String getHttpContent(String url) {
		HttpClient client = new DefaultHttpClient();
		HttpGet get = new HttpGet(url);
		try {
			HttpResponse response = client.execute(get);
			return EntityUtils.toString(response.getEntity(), "UTF-8");
		} catch (ClientProtocolException e) {
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Bitmap getPictureFromUrl(String url) {

		// exit method if method is called from main thread (not allowed)
		if (Looper.myLooper() == Looper.getMainLooper())
			return null;

		URL image;
		try {
			image = new URL(url.replaceAll("&amp;", "&"));

			URLConnection conn = image.openConnection();
			conn.connect();
			BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
			try {
				return BitmapFactory.decodeStream(bis);
			} finally {
				conn.getInputStream().close();
				bis.close();
			}
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static InputStream getPhotoInputStreamFromUrl(String url) {

		// exit method if method is called from main thread (not allowed)
		if (Looper.myLooper() == Looper.getMainLooper())
			return null;

		URL image;
		try {
			image = new URL(url.replaceAll("&amp;", "&"));

			URLConnection conn = image.openConnection();
			conn.connect();
			return new BufferedInputStream(conn.getInputStream());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static boolean shouldShowTeletekstHint(Context context) {
		SharedPreferences prefs = context.getSharedPreferences("teletekst", 0);
		try {
			return prefs.getBoolean(PREF_SHOULD_SHOW_HINT, true);
		} finally {
			Editor edit = prefs.edit();
			edit.putBoolean(PREF_SHOULD_SHOW_HINT, false);
			edit.commit();
		}
	}

	public static String getDateString(Context ctx, GregorianCalendar date) {
		return DateTimeUtils.getInstance(ctx).getTimeDiffString(date.getTimeInMillis());
	}

	public static Bitmap getFacebookLogo(Context ctx) {
		if (facebookLogo == null)
			facebookLogo = BitmapFactory.decodeResource(ctx.getResources(), com.markbuikema.juliana32.R.drawable.ic_fb);
		return facebookLogo;
	}

	public static Bitmap getJulianaLogo(Context ctx) {
		if (julianaLogo == null)
			julianaLogo = BitmapFactory.decodeResource(ctx.getResources(), com.markbuikema.juliana32.R.drawable.ic_launcher);
		return julianaLogo;
	}

	public static void onOrientationChanged(boolean portrait) {
		screenWidth = -1;
	}

	public static float getScreenWidth(Context ctx) {
		if (screenWidth == -1) {
			Display d = ((WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
			screenWidth = d.getWidth();
		}
		return screenWidth;
	}

	public static boolean hasHoneycomb() {
		return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;
	}

	public static float pxToDp(float px) {
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, px, Resources.getSystem().getDisplayMetrics());

	}
	
	public static GregorianCalendar parseDate(String websiteDate) {
		int dateDay = Integer.parseInt(date.substring(0, 2));
		int dateYear = Integer.parseInt(date.substring(date.length() - 4, date.length()));
		int dateMonth = 0;
		Month month = Month.valueOf(date.split(" ")[1].toUpperCase());
		switch (month) {
		case FEBRUARI:
			dateMonth = 1;
			break;
		case MAART:
			dateMonth = 2;
			break;
		case APRIL:
			dateMonth = 3;
			break;
		case MEI:
			dateMonth = 4;
			break;
		case JUNI:
			dateMonth = 5;
			break;
		case JULI:
			dateMonth = 6;
			break;
		case AUGUSTUS:
			dateMonth = 7;
			break;
		case SEPTEMBER:
			dateMonth = 8;
			break;
		case OKTOBER:
			dateMonth = 9;
			break;
		case NOVEMBER:
			dateMonth = 10;
			break;
		case DECEMBER:
			dateMonth = 11;
			break;
		default:
			dateMonth = 0;
			break;
		}

		GregorianCalendar cal = new GregorianCalendar(dateYear, dateMonth, dateDay);
	}
}
