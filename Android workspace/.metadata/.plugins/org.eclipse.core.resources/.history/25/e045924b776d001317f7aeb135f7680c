package com.markbuikema.juliana32.section;

import org.holoeverywhere.LayoutInflater;
import org.holoeverywhere.widget.FrameLayout;
import org.holoeverywhere.widget.LinearLayout;
import org.holoeverywhere.widget.TextView;
import org.holoeverywhere.widget.Toast;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Point;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.text.method.LinkMovementMethod;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.Transformation;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView;

import com.facebook.HttpMethod;
import com.facebook.Request;
import com.facebook.Session;
import com.facebook.Session.NewPermissionsRequest;
import com.facebook.Session.StatusCallback;
import com.facebook.SessionState;
import com.facebook.model.GraphObject;
import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;
import com.markbuikema.juliana32.R;
import com.markbuikema.juliana32.activity.MainActivity;
import com.markbuikema.juliana32.adapter.NieuwsAdapter;
import com.markbuikema.juliana32.model.Comment;
import com.markbuikema.juliana32.model.FacebookNieuwsItem;
import com.markbuikema.juliana32.model.Like;
import com.markbuikema.juliana32.model.NieuwsItem;
import com.markbuikema.juliana32.model.WebsiteNieuwsItem;
import com.markbuikema.juliana32.ui.Toaster;
import com.markbuikema.juliana32.util.Util;
import com.markbuikema.juliana32.util.Util.LinkifyExtra;
import com.nineoldandroids.animation.Animator;
import com.nineoldandroids.animation.Animator.AnimatorListener;
import com.nineoldandroids.view.ViewHelper;
import com.nineoldandroids.view.ViewPropertyAnimator;

public class NieuwsDetail {

	private static final String TAG = "NieuwsDetail";

	private MainActivity act;
	private NieuwsItem item;
	private View clickedView;

	private int actionBarHeight;
	private int columnCount;

	private View likeView;
	private View commentView;

	private FrameLayout nieuwsDetailContainer;
	private View animationView;
	private View nieuwsDetailView;

	private AnimatorListener onDetailShown = new AnimatorListener() {

		@Override
		public void onAnimationStart( Animator arg0 ) {
		}

		@Override
		public void onAnimationRepeat( Animator arg0 ) {
		}

		@Override
		public void onAnimationEnd( Animator arg0 ) {
			animationView.setVisibility( View.GONE );

			if ( item.isFromFacebook() ) {
				ViewHelper.setAlpha( likeView, 0 );
				ViewHelper.setAlpha( commentView, 0 );

				likeView.setVisibility( View.VISIBLE );
				commentView.setVisibility( View.VISIBLE );

				ViewPropertyAnimator.animate( likeView ).alpha( 1 ).setDuration( 300 );
				ViewPropertyAnimator.animate( commentView ).alpha( 1 ).setStartDelay( 150 ).setDuration( 300 );

				Toaster.toast( act, "views animated" );
			}

		}

		@Override
		public void onAnimationCancel( Animator arg0 ) {
		}
	};
	private AnimatorListener onTransformComplete = new AnimatorListener() {
		@Override
		public void onAnimationStart( Animator arg0 ) {
		}

		@Override
		public void onAnimationRepeat( Animator arg0 ) {
		}

		@Override
		public void onAnimationEnd( Animator arg0 ) {
			ViewHelper.setAlpha( nieuwsDetailView, 0.0f );
			nieuwsDetailView.setVisibility( View.VISIBLE );
			ViewPropertyAnimator.animate( nieuwsDetailView ).alpha( 1 ).setDuration( 150 ).setListener( onDetailShown );
		}

		@Override
		public void onAnimationCancel( Animator arg0 ) {
		}
	};
	private AnimatorListener onFadedIn = new AnimatorListener() {

		@Override
		public void onAnimationStart( Animator arg0 ) {
		}

		@Override
		public void onAnimationRepeat( Animator arg0 ) {

		}

		@Override
		public void onAnimationEnd( Animator arg0 ) {
			final Point dims = getCardDimensions();

			int transX = - animationView.getLeft();
			DisplayMetrics metrics = act.getResources().getDisplayMetrics();
			int width = metrics.widthPixels;
			int x = ( width - dims.x ) / 2;
			transX += x;

			ViewPropertyAnimator.animate( animationView ).translationY( actionBarHeight ).translationX( transX ).setDuration( 200 )
					.setListener( onTransformComplete );

			final int initWidth = animationView.getWidth();
			final int additionalWidth = dims.x - initWidth;
			final int initHeight = animationView.getHeight();
			final int additionalHeight = dims.y - initHeight;

			Animation anim = new Animation() {
				@Override
				protected void applyTransformation( float interpolatedTime, Transformation t ) {
					animationView.getLayoutParams().width = (int) ( initWidth + additionalWidth * interpolatedTime );
					animationView.getLayoutParams().height = (int) ( initHeight + additionalHeight * interpolatedTime );
					animationView.requestLayout();
				}

				@Override
				public boolean willChangeBounds() {
					return true;
				}
			};

			anim.setDuration( 200 );

			animationView.startAnimation( anim );
		}

		@Override
		public void onAnimationCancel( Animator arg0 ) {

		}
	};

	public NieuwsDetail( final MainActivity act, final View clickedView, final NieuwsItem item ) {
		this.act = act;
		this.item = item;
		this.clickedView = clickedView;

		actionBarHeight = act.getResources().getDimensionPixelSize( R.dimen.nieuws_header_margin );
		columnCount = act.getResources().getInteger( R.integer.columnCount );

		// the view of an empty card that will transform from clicked view to full
		// detail view
		animationView = act.findViewById( R.id.animationCard );

		// the container that contains the detail view and the animation view
		nieuwsDetailContainer = (FrameLayout) act.findViewById( R.id.nieuwsDetailContainer );

		// inflate a new instance of the nieuwsdetail view
		nieuwsDetailView = LayoutInflater.from( act ).inflate(
				item.isFromFacebook() ? R.layout.nieuwsdetail_facebook : R.layout.nieuwsdetail_website );
		nieuwsDetailView.setVisibility( View.INVISIBLE );

		// assign the like and comment views
		likeView = nieuwsDetailView.findViewById( R.id.likesView );
		commentView = nieuwsDetailView.findViewById( R.id.commentsView );

		// ensures only the animation view is in the container
		while ( nieuwsDetailContainer.getChildCount() > 1 )
			nieuwsDetailContainer.removeViewAt( 1 );

		// adds the nieuwsdetailview to the container
		LayoutParams lp = new LayoutParams( LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT );
		nieuwsDetailContainer.addView( nieuwsDetailView , lp);

		// waits for the detail view to layout, continues initializing the animation
		nieuwsDetailView.getViewTreeObserver().addOnGlobalLayoutListener( new OnGlobalLayoutListener() {

			@Override
			public void onGlobalLayout() {
				// remove the listener so it doesn't trigger on next layout
				Util.removeOnGlobalLayoutListener( nieuwsDetailView, this );

				putContent( nieuwsDetailView, item );

				// sets the starting position for the animationView
				int startX = clickedView.getLeft() - nieuwsDetailView.getLeft();
				int startY = clickedView.getTop() - nieuwsDetailView.getTop();
				int startWidth = clickedView.getWidth();
				int startHeight = clickedView.getHeight();

				LayoutParams animationParams = new LayoutParams( startWidth, startHeight );
				animationView.setLayoutParams( animationParams );
				ViewHelper.setTranslationX( animationView, startX );
				ViewHelper.setTranslationY( animationView, startY );
				animationView.requestLayout();

				ViewHelper.setAlpha( animationView, 0.0f );
				animationView.setVisibility( View.VISIBLE );
				ViewPropertyAnimator.animate( animationView ).alpha( 1.0f ).setListener( onFadedIn ).setDuration( 150 );

			}
		} );

	}

	public void show() {

	}

	public void hide() {
		animationView.setVisibility( View.GONE );
		nieuwsDetailView.setVisibility( View.GONE );
	}

	@TargetApi( Build.VERSION_CODES.HONEYCOMB_MR2 )
	private Point getCardDimensions() {
		Point dims = new Point();
		WindowManager wm = (WindowManager) act.getSystemService( Context.WINDOW_SERVICE );
		Display d = wm.getDefaultDisplay();
		if ( Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2 )
			d.getSize( dims );
		else {
			dims.x = d.getWidth();
			dims.y = d.getHeight();
		}

		int columnCount = act.getResources().getInteger( R.integer.columnCount );

		if ( item.isFromFacebook() && act.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE )
			dims.x = (int) ( dims.x * .5f );
		else
			switch ( columnCount ) {
			case 2:
				dims.x = (int) ( dims.x * .75f );
				break;
			case 3:
				dims.x = (int) ( dims.x * .60f );
				break;
			}
		ViewGroup container = (ViewGroup) nieuwsDetailView.findViewById( R.id.detailContainer );
		int measuredHeight = container.getChildAt( 0 ).getMeasuredHeight();
		dims.y = Math.min( dims.y, measuredHeight );

		return dims;
	}

	@TargetApi( Build.VERSION_CODES.HONEYCOMB )
	private void putContent( View detailView, NieuwsItem item ) {

		ViewGroup detailContainer = (ViewGroup) detailView.findViewById( R.id.detailContainer );
		detailContainer.addView( getDetailView() );

		detailView.getLayoutParams().width = getCardDimensions().x;
		detailView.requestLayout();
	}

	@TargetApi( Build.VERSION_CODES.HONEYCOMB )
	private View getDetailView() {
		View view = null;
		if ( item instanceof WebsiteNieuwsItem )
			view = NieuwsAdapter.constructWebsiteView( act, item, null );
		else
			if ( item instanceof FacebookNieuwsItem )
				if ( item.isPhoto() )
					view = NieuwsAdapter.constructFacebookPhotoView( act, (FacebookNieuwsItem) item, null );
				else
					view = NieuwsAdapter.constructFacebookView( act, (FacebookNieuwsItem) item, null );

		TextView subTitleView = (TextView) view.findViewById( R.id.nieuwsitem_subtitle );
		TextView contentView = (TextView) view.findViewById( R.id.nieuwsitem_content );
		contentView.setText( Util.trimTrailingWhitespace( LinkifyExtra.addLinksHtmlAware( item.getContent() ) ) );
		contentView.setMovementMethod( LinkMovementMethod.getInstance() );
		contentView.setLinksClickable( true );
		if ( Build.VERSION.SDK_INT >= 11 )
			contentView.setTextIsSelectable( true );

		contentView.setTypeface( Util.getRobotoSlabLight( act ) );

		subTitleView.setVisibility( View.GONE );
		contentView.setVisibility( View.VISIBLE );

		return view;
	}

	protected void postComment( final String message ) {

		if ( ! Session.getActiveSession().isOpened() )
			Toast.makeText( act, "Facebook session is not opened!", Toast.LENGTH_LONG ).show();

		if ( ! Session.getActiveSession().getPermissions().contains( "publish_actions" )
				|| ! Session.getActiveSession().getPermissions().contains( "publish_stream" ) ) {
			Session.getActiveSession().requestNewPublishPermissions(
					new NewPermissionsRequest( act, "publish_actions", "publish_stream" ) );
			Session.getActiveSession().addCallback( new StatusCallback() {

				@Override
				public void call( Session session, SessionState state, Exception exception ) {
					if ( session.getPermissions().contains( "publish_actions" )
							&& session.getPermissions().contains( "publish_stream" ) ) {
						postComment( message );
						Session.getActiveSession().removeCallback( this );
					}
				}
			} );
			return;
		}

		Session session = Session.getActiveSession();
		String id = ( (FacebookNieuwsItem) item ).getFbId();
		String graphPath = id + "/comments";
		JSONObject object = new JSONObject();
		try {
			object.put( "message", message );
		} catch ( JSONException e ) {
			e.printStackTrace();
		}
		GraphObject graphObject = GraphObject.Factory.create( object );

		Request request = Request.newPostRequest( session, graphPath, graphObject, null );

		request.executeAsync();
	}

	public String getDetailUrl() {
		if ( item instanceof WebsiteNieuwsItem )
			return ( (WebsiteNieuwsItem) item ).getDetailUrl();
		else
			return "http://www.facebook.com/" + ( (FacebookNieuwsItem) item ).getFbId().replace( "_", "/posts/" );
	}

	public boolean hasPhotos() {
		return item.isPhoto();
	}

	public boolean hasComments() {
		try {
			return ( (FacebookNieuwsItem) item ).getComments().size() > 0;
		} catch ( ClassCastException e ) {
			return false;
		}
	}

	public void onSaveInstanceState( Bundle outState ) {
		outState.putString( "nieuwsId", item.getId() );
	}

	public void onLikedChanged( final boolean liked ) {
		final FacebookNieuwsItem fbni;
		try {
			fbni = ( (FacebookNieuwsItem) item );
		} catch ( ClassCastException e ) {
			return;
		}

		if ( ! Session.getActiveSession().getPermissions().contains( "publish_actions" )
				|| ! Session.getActiveSession().getPermissions().contains( "publish_stream" ) ) {

			Session.getActiveSession().requestNewPublishPermissions(
					new NewPermissionsRequest( act, "publish_actions", "publish_stream" ) );
			Session.getActiveSession().addCallback( new StatusCallback() {

				@Override
				public void call( Session session, SessionState state, Exception exception ) {
					if ( session.getPermissions().contains( "publish_actions" )
							&& session.getPermissions().contains( "publish_stream" ) ) {
						onLikedChanged( liked );
						Session.getActiveSession().removeCallback( this );
					}
				}
			} );
			return;
		}

		Request request = Request.newGraphPathRequest( Session.getActiveSession(), fbni.getFbId() + "/likes", null );
		if ( liked )
			request.setHttpMethod( HttpMethod.POST );
		else
			request.setHttpMethod( HttpMethod.DELETE );

		request.executeAsync();
	}

	public String getContent() {
		return item.getContent();
	}

	private static View getCommentView( final Context act, final Comment comment ) {
		View view = LayoutInflater.from( act ).inflate( R.layout.listitem_comment, null );

		TextView name = (TextView) view.findViewById( R.id.commentName );
		TextView date = (TextView) view.findViewById( R.id.commentDate );
		TextView text = (TextView) view.findViewById( R.id.commentMessage );
		final ImageView pic = (ImageView) view.findViewById( R.id.commentPicture );

		name.setTypeface( Util.getRobotoCondensed( act ) );
		date.setTypeface( Util.getRobotoCondensed( act ) );
		text.setTypeface( Util.getRobotoLight( act ) );

		name.setText( comment.getName() );

		String dateString = Util.getDateString( act, comment.getCreatedAt() );
		// Log.d("comment_date_adapter", dateString);
		date.setText( dateString );
		text.setText( comment.getText() );
		UrlImageViewHelper.setUrlDrawable( pic, comment.getImgUrl() );

		pic.setContentDescription( comment.getName() );
		view.setOnClickListener( new OnClickListener() {

			@Override
			public void onClick( View arg0 ) {
				act.startActivity( new Intent( Intent.ACTION_VIEW, Uri.parse( "fb://profile/" + comment.getUserId() ) ) );
			}
		} );

		return view;
	}

	private View getLikeView( final Context act, final Like like ) {
		final View view = LayoutInflater.from( act ).inflate( R.layout.listitem_like );
		final ImageView image = (ImageView) view.findViewById( R.id.like_image );
		UrlImageViewHelper.setUrlDrawable( image, like.getImgUrl() );

		image.setContentDescription( like.getName() );
		return view;
	}

	public static void populateComments( Context context, LinearLayout container, FacebookNieuwsItem item ) {
		if ( item.getComments().size() == 0 ) {
			container.setVisibility( View.GONE );
			return;
		} else
			container.setVisibility( View.VISIBLE );

		container.removeAllViews();
		for ( Comment comment : item.getComments() )
			container.addView( getCommentView( context, comment ) );

	}

	public void populateLikes( Context context, LinearLayout container, FacebookNieuwsItem item ) {
		if ( item.getLikeCount() == 0 ) {
			container.setVisibility( View.GONE );
			return;
		} else
			container.setVisibility( View.VISIBLE );

		container.removeAllViews();
		for ( Like like : item.getLikes() )
			container.addView( getLikeView( context, like ) );
	}

	public String getTitle() {
		return item.getTitle();
	}

}